%Description
% nx = n states, nu = n inputs, N = Prediciton horizon, T = predict time
% A,B = System matricies; Q,R = Cost matrices, x0 = System initial cond
% tspan = simulationMax time; h = simulation precision; 
% Xref = state references; Xlb,Xub = state lower and upper bounds
% Ulb, Uub = Input lower and upper bounds. 


%% Parameters
%Model parameters
%   states,inputs,time,prediction
	syms a1 a2 a3 a4 real
    syms e1 e2 real
    syms b1 b2 real
    nx = 2; nu = 1;
    
    A = [0 1; -1 -1];       Asym = [a1 a2;a3 a4];
    B = [0;1];              Bsym = [b1;b2];
    E = [0;0];              Esym = [e1;e2];
    Model = struct('nx',nx,'nu',nu,'A',A,'Asym',Asym,'B',B,'E',E,'Esym',Esym);

%MPC parameters
    N = 5; T = 1; 
    syms q1 q2 q3 q4 real
    syms r1          real
    syms f1 f2 f3    real
    syms p1 p2 p3 p4 real
    Q = [1,0;0,1];          Qsym = [q1 q2;q3 q4];
    R = 0.1;                Rsym = r1;
    f = [0;0;0];            fsym = [f1;f2;f3];
    P = [0 0;0 0];          Psym = [p1 p2;p3 p4];
    nSym = 3*nx^2 + nu^2 + nx*nu + 2*nx + nu
    Xlb = []; Xub = [];
    Ulb = []; Uub = [];
    MPCParam = struct('N',N,'T',T,'Q',Q,'Qsym',Qsym,'R',R,'Rsym',Rsym...
        ,'P',P,'Psym',Psym,'f',f,'fsym',fsym,'Xlb',Xlb,'Xub',Xub,'Ulb'...
        ,Ulb,'Uub',Uub,'nSym',nSym);
    
%RL Parameters
    syms V0 real
    gamma = 0.99;
    theta = [q1;q2;q3;q4;a1;a2;a3;a4;e1;e2];
    alfa = 0.001;
    RLParam = struct('gamma',gamma,'theta',theta,'alfa',alfa);
    
%initial conditions and durations
    
    x0 = [1;0];
    tspan = 600;
    h = 0.01;
    xRef= [0;0];
    
    InitParam = struct('x0',x0,'tspan',tspan,'h',h,'xRef',xRef);
   
    MPCParam     = symbolicProblem(Model,MPCParam,RLParam,InitParam,0);
   [MPCParam.KKT, MPCParam.KKTF ]= symbolicGradiant(MPCParam,MPCParam.vars(1:(N+1)*nx+N*nu,1));
   [MPCParam.Jtheta,MPCParam.F] = symbolicGradiant(MPCParam,theta);
%%
fprintf("================NEW SIMULATION================\n")
fprintf("================NEW SIMULATION================\n")
fprintf("================NEW SIMULATION================\n")
out = Simulation(Model,MPCParam,RLParam,InitParam);
clearvars -except MPCParam InitParam Model RLParam out
%%
Analyze(out.x,out.u,out.t,out,MPCParam,RLParam,Model)
%%
% evalTime = 20;
% Jnum = zeros(floor(size(out.TD,1)/20),1);
% Func = symfun(sum(MPCParam.obj),MPCParam.vars);
% Func = matlabFunction(Func);
% fstring = sprintf('Func(');
% for i = 1:size(out.numsopt,2)
%    fstring = sprintf('%s %s%i%s',fstring,"out.numsopt(t,",i,"),");
% end
% fstring = fstring(1:end-1); fstring = sprintf('%s)',fstring);
% for i = 1:size(Jnum,1)
%     t = (i-1)*20 + 1;
%     Jnum(i) = eval(fstring);
% end
% figure(3)
% clf(3)
% plot(RLParam.gamma*out.V(21:20:end) - out.V(1:20:end-19))
% yyaxis right
% plot(out.TD(1:20:end-1))
%%
bound = 50;
tbound = 101 + bound;
figure(2)
subplot(3,2,1)
plot(out.t(1:end-tbound), out.theta(1:end-bound,1:4)); title("Theta 1:4"); grid on
subplot(3,2,2)
plot(out.t(1:end-tbound), out.nabla(1:end-bound,1:4)); title("Nabla 1:4"); grid on;
subplot(3,2,3)
plot(out.t(1:end-tbound), out.theta(1:end-bound,5:8)); title("Theta 5:8"); grid on
subplot(3,2,4)
plot(out.t(1:end-tbound), out.nabla(1:end-bound,5:8)); title("Nabla 5:8"); grid on;
subplot(3,2,5)
plot(out.t(1:end-tbound), out.theta(1:end-bound,9:10)); title("Theta 9:10"); grid on;
subplot(3,2,6)
plot(out.t(1:end-tbound), out.nabla(1:end-bound,9:10)); title("Nabla 9:10"); grid on;
